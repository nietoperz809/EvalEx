package com.udojava.evalex;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URISyntaxException;
import java.util.LinkedList;
import java.util.Map;

/**
 * Created by Administrator on 1/26/2017.
 */
@SuppressWarnings("unchecked")
public class Main
{
    // Generated by ANT
    private static final String BUILD_NUMBER = "147";

    static LinkedList<String> history = new LinkedList<>();

    public static void main (String[] args) throws IOException, InterruptedException, URISyntaxException
    {
        System.out.println("\n\n*** Programmer's Console Calculator (build " + BUILD_NUMBER + ") ***\n");
        System.out.println("Use x, b or o prefix to denote hex, bin or octal numbers");
        System.out.println("Type 'ops' to see list of operators, or 'funcs' for functions");
        System.out.println("Or type any term - or 'bye' to exit ...");
        start();
    }

    private static void start ()
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int mode = 0;
        do
        {
            try
            {
                System.out.print("> ");
                String s = br.readLine().trim();
                if (s.startsWith("radix"))
                {
                    s = s.substring(5).trim();
                    if (s.isEmpty())
                    {
                        System.out.println("Current radix: " + mode);
                        continue;
                    }
                    mode = Integer.parseInt(s);
                    continue;
                }
                else if (s.startsWith("rep"))
                {
                    if (!history.isEmpty())
                    {
                        s = s.substring(3).trim();
                        String old;
                        if (s.isEmpty())
                        {
                            old = history.get(history.size()-1);
                        }
                        else
                        {
                            int num = Integer.parseInt(s);
                            old = history.get (num);
                        }
                        runParser(mode, old);
                    }
                    continue;
                }
                switch (s)
                {
                    case "hist":
                        for (int n = 0; n < history.size(); n++)
                        {
                            System.out.println("" + n + ": " + history.get(n));
                        }
                        break;
                    case "bye":
                        System.exit(0);
                    case "ops":
                    {
                        Expression e = new Expression("", null);
                        printMathObjects(e.getOps());
                        break;
                    }
                    case "funcs":
                    {
                        Expression e = new Expression("", null);
                        printMathObjects(e.getFuncs());
                        break;
                    }
                    default:
                        runParser(mode, s);
                        break;
                }
            }
            catch (Exception e)
            {
                System.out.println("Error: "+e);
            }
        } while (true);
    }

    private static void runParser (int radix, String s)
    {
        Expression e = runUdoParser(s);
        BigDecimal ret = e.eval();
        if (!history.contains(s))
            history.addLast(s);
        BigInteger big = ret.toBigInteger();
        System.out.print(s + " = ");
        if (radix == 0)
        {
            System.out.println(ret.toString());
        }
        else
        {
            System.out.println(big.toString(radix));
        }
    }

    private static void printMathObjects (Map m)
    {
        for (Object obj : m.entrySet())
        {
            Map.Entry<String, Expression.Mathobject> mo =
                    (Map.Entry<String, Expression.Mathobject>) obj;
            String desc = mo.getValue().getDescription();
            System.out.print(mo.getKey());
            if (desc != null)
            {
                System.out.println(" : " + desc);
            }
            else
            {
                System.out.println();
            }
        }
    }

    private static Expression runUdoParser (String s)
    {
        s = s.replaceAll("\\s+", ""); // remove whitespace
        s = s.replace("!", "!0");  // fake op for factorial
        s = s.replace("~", "0~"); // fake op for negation
        s = realReplaceAll(s, "(+(", "(0+(");  // fix unary + bug
        s = realReplaceAll(s, "(-(", "(0-(");  // fix unary - bug
        if (s.startsWith("-") || s.startsWith("+"))
        {
            s = "0" + s;
        }
        s = s.replaceAll("floor", "§§§1"); // save some words
        s = s.replaceAll ("xor", "§§§2");
        s = s.replaceAll("or", " or ");
        s = s.replaceAll("and", " and ");
        s = s.replaceAll("shl", " shl ");
        s = s.replaceAll("shr", " shr ");
        s = s.replaceAll("§§§1", "floor"); // restore some words
        s = s.replaceAll ("§§§2", " xor ");
        System.out.println(s);
        return new Expression(s, history);
    }

    private static String realReplaceAll (String s, String a, String b)
    {
        for (; ; )
        {
            String n = s.replace(a, b);
            if (n.equals(s))
            {
                return n;
            }
            s = n;
        }
    }
}
