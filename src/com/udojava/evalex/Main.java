package com.udojava.evalex;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URISyntaxException;
import java.util.Map;

/**
 * Created by Administrator on 1/26/2017.
 */
@SuppressWarnings("unchecked")
public class Main
{
    // Generated by ANT
    private static final String BUILD_NUMBER = "83";

    public static void main (String[] args) throws IOException, InterruptedException, URISyntaxException
    {
        System.out.println("\n\n*** Programmer's Console Calculator (build " + BUILD_NUMBER + ") ***\n");
        System.out.println("Use x, b or o prefix to denote hex, bin or octal numbers");
        System.out.println("Type 'ops' to see list of operators, or 'funcs' for functions");
        System.out.println("Or type any term - or 'bye' to exit ...");
        start();
    }

    private static void start ()
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String s;
        label:
        do
        {
            try
            {
                System.out.print("> ");
                s = br.readLine();
                switch (s)
                {
                    case "bye":
                        break label;
                    case "ops":
                    {
                        Expression e = new Expression("");
                        printMathObjects(e.getOps());
                        break;
                    }
                    case "funcs":
                    {
                        Expression e = new Expression("");
                        printMathObjects(e.getFuncs());
                        break;
                    }
                    default:
                    {
                        Expression e = runUdoParser(s);
                        System.out.print("==> ");
                        BigDecimal ret = e.eval();
                        BigInteger big = ret.toBigInteger();
                        System.out.print("Decimal: " + ret);
                        System.out.print("\n\tInteger: " + big.toString(10));
                        System.out.print("\n\tOctal: " + big.toString(8));
                        System.out.print("\n\tHex: " + big.toString(16));
                        System.out.print("\n\tBin: " + big.toString(2));
                        System.out.print("\n\tChar: " + (char) ret.intValue());
                        System.out.println();
                        break;
                    }
                }
            }
            catch (Exception e)
            {
                System.out.println(e.getMessage());
            }
        } while (true);
    }

    private static void printMathObjects (Map m)
    {
        for (Object obj : m.entrySet())
        {
            Map.Entry<String, Expression.Mathobject> mo =
                    (Map.Entry<String, Expression.Mathobject>) obj;
            String desc = mo.getValue().getDescription();
            System.out.print(mo.getKey());
            if (desc != null)
            {
                System.out.println(" : " + desc);
            }
            else
            {
                System.out.println();
            }
        }
    }

    private static Expression runUdoParser (String s)
    {
        s = s.replaceAll("\\s+", ""); // remove whitespace
        s = s.replace("!", "!0");  // fake op for factorial
        s = s.replace("~", "0~"); // fake op for negation
        s = realReplaceAll(s, "(+(", "(0+(");  // fix unary + bug
        s = realReplaceAll(s, "(-(", "(0-(");  // fix unary - bug
        if (s.startsWith("-") || s.startsWith("+"))
        {
            s = "0" + s;
        }
        s = s.replaceAll("or", " or ");
        s = s.replaceAll("and", " and ");
        s = s.replaceAll("xor", " xor ");
        s = s.replaceAll("shl", " shl ");
        s = s.replaceAll("shr", " shr ");
        return new Expression(s);
    }

    private static String realReplaceAll (String s, String a, String b)
    {
        for (; ; )
        {
            String n = s.replace(a, b);
            if (n.equals(s))
            {
                return n;
            }
            s = n;
        }
    }
}
